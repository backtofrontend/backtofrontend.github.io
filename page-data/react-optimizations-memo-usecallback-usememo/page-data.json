{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/react-optimizations-memo-usecallback-usememo/","result":{"data":{"site":{"siteMetadata":{"title":"Welcome Back to Front End and Beyond"}},"markdownRemark":{"id":"61a23695-01f0-541f-aafd-b5accbe5862a","excerpt":"What this guide is about? React.memo React.useCallback Referential equality Referential equality cheat-sheet Optimizing with useCallback React.useMemo Should I…","html":"<p><a id=\"-\"></a></p>\n<ul>\n<li><a href=\"#intro\">What this guide is about?</a></li>\n<li><a href=\"#memo\">React.memo</a></li>\n<li>\n<p><a href=\"#use-callback\">React.useCallback</a></p>\n<ul>\n<li><a href=\"#referential-equality\">Referential equality</a></li>\n<li><a href=\"#referential-equality-cheat-sheet\">Referential equality cheat-sheet</a></li>\n<li><a href=\"#optimizing-with-use-callback\">Optimizing with useCallback</a></li>\n</ul>\n</li>\n<li><a href=\"#use-memo\">React.useMemo</a></li>\n<li><a href=\"#optimize-everything\">Should I optimize everything from now on?</a></li>\n<li><a href=\"#additional-resources\">Additional Resources</a></li>\n</ul>\n<br>\n<h2 id=\"intro\"><a href=\"#-\">^ What this guide is about?</a></h2>\n<p>If you, dear traveler, are anything like me and you still get confused about when you should use some of Reacts built-in methods and hooks. <em>I.e. memo, useMemo and useCalback</em>.</p>\n<p>I’m glad you joined me. We will break down and analyze each of them and figure out when and how to use them.</p>\n<p>These functions mean to help us optimize performance. But each has a specific use case.</p>\n<hr>\n<h2 id=\"memo\"><a href=\"#-\">^ React.memo</a></h2>\n<p>We’ll start with <em>React.memo</em> first.</p>\n<p>Let’s say you have a Parent component that has a blue state with a number value that changes onClick inside it. And that Parent has a Child component to which we pass a red state, with a number value that never changes.</p>\n<h3>Parent</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Parent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FunctionComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>blue<span class=\"token punctuation\">,</span> setBlue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>number</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(0);\n  const [red] = useState</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>number</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(0);\n\n  const incrementBlueCount = () => </span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setBlue</span><span class=\"token punctuation\">(</span>blue <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n\n  return (\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        blue count: </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>blue<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>incrementBlueCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Increment Blue</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">childCount</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  );\n};\n\nexport default Parent;</span></code></pre></div>\n<h3>Child</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  childCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Child<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>FunctionComponent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = ({ childCount }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child renders'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        red count: </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>childCount<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Change Red</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n\nexport default Child;</span></code></pre></div>\n<p>If the blue state of the Parent bound to an onClick handler would have changed. Even though we wouldn’t pass that state to the Child as a prop, the Child would still re-render.</p>\n<p><img src=\"/ad14549820cddc47c007621eebdeafd1/preReactMemo.gif\" alt=\"Example\"></p>\n<p align=\"center\">\n    <i>Child component re-renders by default each time when we change Parent's local state</i>\n</p>\n<blockquote>\n<p>”When parent components’ state changes React will recursively re-render all of its children. Unless we tell him no to.”</p>\n</blockquote>\n<p>To fix that. We could wrap the Child component export with a <em>React.memo</em> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And as simple as that, we told the Child component to re-render only when its props are actually changing.</p>\n<p><img src=\"/8afefe2406f93b53cfe44a0dec48f30c/postReactMemo.gif\" alt=\"Example\"></p>\n<p align=\"center\">\n    <i>Child component does not re-render each time when we change Parent's local state</i>\n</p>\n<hr>\n<h2 id=\"use-callback\"><a href=\"#-\">^ React.useCallback</a></h2>\n<p>To illustrate when we should be using the <em>useCallback</em> hook, first, we will break the optimization of the Child component.</p>\n<p>Let’s create a function for changing the state which we are passing down to our Child, the red state.</p>\n<p>Where that function would receive an argument as a number coming back from the Child. And inside the function we would call the state handler to set it to that new number.</p>\n<p>Let’s pass the function as a prop to the Child component.\nAnd finally, let’s add a function inside the Child component that will call the props function.</p>\n<h3>Parent</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>red<span class=\"token punctuation\">,</span> setRed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>number</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(0);\n// ...\nconst changeRedCount = (random: number) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setRed</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n// ...\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token attr-name\">childCount</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>red<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeRedCount<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">;\n// ...</span></code></pre></div>\n<h3>Child</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChildProps</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onIncrementRedCountClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onIncrementRedCountClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Change Red</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>By simply passing the function as a prop, even if we were to click only the button in the Parent component. Triggering the blue state update, while not changing the red state, passed to the Child component. We would go back to the previous behavior where our Child would re-render on every local state change within the Parent.</p>\n<p>So why does our <em>React.memo</em> optimization break in that case? The reason to why that happens is <em>referential equality</em>.</p>\n<h3 id=\"referential-equality\"><a href=\"#-\">^ Referential equality</a></h3>\n<p>If you were to compare 2 variables with a same value,</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isEqual <span class=\"token operator\">=</span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>the evaluation returns true.</p>\n<p>But if you were to compare 2 objects, each with a key in it, whose value is 10</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isEqual <span class=\"token operator\">=</span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>the evaluation returns false.</p>\n<p>Because whenever we are comparing objects inside the JS, what we are actually comparing is their referential equality. Roughly, we’re trying to check if both objects are allocated in the same space in memory.</p>\n<p>If you were instead to say</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// then</span>\n<span class=\"token keyword\">const</span> isEqual <span class=\"token operator\">=</span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>But not because they are now both the same objects that have the same keys whose value is 10.</p>\n<p>Instead, both of the variables are now pointing to the same space in memory. We don’t have a new object but a new variable pointing to that same object.</p>\n<h3 id=\"referential-equality-cheat-sheet\"><a href=\"#-\">^ Referential equality cheat-sheet</a></h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// true</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">'a'</span> <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> x\nx <span class=\"token operator\">===</span> y <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"optimizing-with-use-callback\"><a href=\"#-\">^ Optimizing with useCallback</a></h3>\n<p>Now to get back to our example. So far on every single render we are now creating a brand new function (object). And React is not trying to compare the values of the function prop, instead it is checking for referential equality. Latter being a slightly less expensive operation.</p>\n<p>To fix that problem as well. Let’s introduce the <em>useCallback</em> hook. By creating a memoized callback function, throughout the whole life-cycle of the component, it will remain the same. The values passed to the function might change, but the function itself will stay referentially the same.</p>\n<h3>Parent</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> changeRedCount <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">random<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setRed</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><strong>Important</strong> thing to remember when using the useCallback hook. As a rule of thumb, in the dependency array at the end we need to include anything that is being used inside the function. With a few exceptions.</p>\n<p>Notice we are omitting the state setter <em>setRed</em> as a dependency, as it is unnecessary since React ensures that the setter function will remain the same throughout the life-cycle of the component.</p>\n<p>And the second <strong>important</strong> thing is; If you are using a helper function or a variable only inside the <em>useCallback</em> function, instead of defining them outside its scope, nest everything inside the function body.</p>\n<p>This improves readability, prevents unnecessary bugs, and allows you to avoid putting those helpers or vars as dependencies in the useCallback dependency array.</p>\n<p>Now everything is back on track, and our Child component only re-renders when its props change.</p>\n<p><img src=\"/8d6660d2b86e205cb68973623dab623d/useCallback.gif\" alt=\"Example\"></p>\n<p align=\"center\">\n    <i>Child component only re-renders each time when we change Child's incoming props (red state)</i>\n</p>\n<hr>\n<h2 id=\"use-memo\"><a href=\"#-\">^ React.useMemo</a></h2>\n<p>Final hook we can use to optimize our React components is a <em>useMemo</em> hook.</p>\n<p>Let’s first introduce a new, green state, inside our Parent component. An array of numbers. And what we’re going to want to see is the largest number from that array displayed on our page.</p>\n<h3>Parent</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>green<span class=\"token punctuation\">,</span> setGreen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>number</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">>([1, 5, 3, 4, 2]);\n// ...\nconst changeGreen = () => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setGreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n\nconst highestNumber = () => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'determining winner'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n// ...\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>winner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  green is: </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token function\">highestNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>changeGreen<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Change Green</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;\n// ...</span></code></pre></div>\n<p>Presumably that would be an expensive operation, so we wouldn’t want to preform it on every single render. The way it is behaving right now.</p>\n<p><img src=\"/2a51bf2595469fb7e9bcff16b9073969/preUseMemo.gif\" alt=\"Example\"></p>\n<p align=\"center\">\n    <i>The highestNumber function is triggered each time when we change Parent's state. Or simply on every render</i>\n</p>\n<p>Once again, let’s intervene. We’re going to change our <em>highestNumber</em> function to return a memoized value. Using the <em>useMemo</em> hook, as follows…</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> highestNumberMemoized <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'determining winner'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>green<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\ngreen <span class=\"token keyword\">is</span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>highestNumberMemoized<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Don’t forget to add the green state as a dependency to the array at the end. To ensure that highestNumber gets recalculated only when the green state changes.</p>\n<p>That’s it. We can observe the fruits of our labor in action.</p>\n<p><img src=\"/bdcad7d301d15c53a2da6cee021f6246/postUseMemo.gif\" alt=\"Example\"></p>\n<p align=\"center\">\n    <i>The highestNumberMemoized function is triggered only when the green state changes</i>\n</p>\n<!-- <hr> -->\n<!-- WIP Stale Props -->\n<hr>\n<h2 id=\"optimize-everything\"><a href=\"#-\">^ Should I optimize everything from now on?</a></h2>\n<p>Nope. There is no free lunch.</p>\n<blockquote>\n<p>When should you NOT use React memo?</p>\n<blockquote>\n<p>”I would assume that the same general advice applies for React.memo as it does for shouldComponentUpdate and PureComponent: doing comparisons does have a small cost, and there’s scenarios where a component would never memoize properly (especially if it makes use of props.children). So, don’t just automatically wrap everything everywhere. See how your app behaves in production mode, use React’s profiling builds and the DevTools profiler to see where bottlenecks are, and strategically use these tools to optimize parts of the component tree that will actually benefit from these optimizations.”</p>\n</blockquote>\n</blockquote>\n<p>As stated <a href=\"https://github.com/facebook/react/issues/14463#issuecomment-448829902\">here</a>.</p>\n<h2 id=\"additional-resources\"><a href=\"#-\">^ Additional Resources</a></h2>\n<p><a href=\"https://kentcdodds.com/blog/usememo-and-usecallback\">When to useMemo and useCallback - by Kent C. Dodds</a></p>\n<p><a href=\"https://reactjs.org/docs/hooks-intro.html\">Introducing Hooks - official React docs</a></p>\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\">A Complete Guide to useEffect - by Dan Abramov</a></p>\n<p><a href=\"https://www.bitnative.com/2020/07/16/four-reasons-react-renders-and-three-ways-to-stop-it/\">Four Reasons React Renders (and three ways to stop it) - by Cory House</a></p>","fields":{"readingTime":{"text":"8 min read"}},"frontmatter":{"title":"React Optimizations - Memo, useCallback, useMemo","date":"January 08, 2021","updated":null,"description":"This time we will take a look at few of Reacts optimization hooks and methods. Breaking down each of them and putting them to good use in proper places."}}},"pageContext":{"slug":"/react-optimizations-memo-usecallback-usememo/","previous":{"fields":{"slug":"/basic-overview-office-365/"},"frontmatter":{"title":"Basic Overview - Bite Sized Office 365"}},"next":null}}}